(include "ch2.scm")
(define-library (sicp ex31)
  (export ex31)
  (import (scheme base))
  (begin
    (define (ex31 n)
      (lambda (x)
        (set! n (+ n x))
        n))))

(define-library (sicp ex32)
  (export ex32)
  (import (scheme base))
  (begin
    (define (ex32 func)
      (let ((call-count 0))
        (lambda (input)
          (cond ((eq? input 'how-many-calls?) call-count)
                (else (set! call-count (+ call-count 1))
                      (func input))))))))

(define-library (sicp ex33)
  (export make-account)
  (import (scheme base))
  (begin
    (define (make-account balance account-password)
      (define (withdraw amount)
        (cond ((>= balance amount) (set! balance (- balance amount))
               balance)
              (else "Insufficient funds")))
      (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
      (define (incorrect-password . args)
        "Incorrect password")
      (define (dispatch password m)
        (cond ((eq? password account-password)
               (cond ((eq? m 'withdraw) withdraw)
                     ((eq? m 'deposit) deposit)
                     (else (error "Unknown request" m))))
              (else incorrect-password)))
      dispatch)))

(define-library (sicp ex34)
  (export make-account)
  (import (scheme base))
  (begin
    (define (make-account balance account-password)
      (let ((login-tries 0))
        (define (withdraw amount)
          (cond ((>= balance amount) (set! balance (- balance amount))
                 balance)
                (else "Insufficient funds!")))
        (define (deposit amount)
          (set! balance (+ balance amount))
          balance)
        (define (call-the-cops . args)
          "Calling the cops!")
        (define (incorrect-password . args)
          "Incorrect password")
        (define (dispatch password m)
          (cond ((eq? password account-password)
                 (set! login-tries 0)
                 (cond ((eq? m 'withdraw) withdraw)
                       ((eq? m 'deposit) deposit)
                       (else (error "Unknown message" m))))
                (else (cond ((>= login-tries 7) call-the-cops)
                            (else (set! login-tries (+ login-tries 1))
                                  incorrect-password)))))
        dispatch))))

(define-library (sicp monte-carlo)
  (export monte-carlo)
  (import (scheme base))
  (begin
    (define (monte-carlo trials experiment)
      (define (iter trials-remaining trials-passed)
        (cond ((= trials-remaining 0)
               (/ trials-passed trials))
              ((experiment)
               (iter (- trials-remaining 1)
                     (+ trials-passed 1)))
              (else (iter (- trials-remaining 1)
                          trials-passed))))
      (iter trials 0))))

(define-library (sicp monte-carlo-pi)
  (export estimate-pi)
  (import (scheme base)
          (srfi 27)
          (scheme inexact)
          (sicp monte-carlo))
  (begin
    (define (estimate-pi trials)
      (sqrt (/ 6 (monte-carlo trials cesaro-test))))
    (define (cesaro-test)
      (= (gcd (random-integer 2147483647)
              (random-integer 2147483647))
         1))))

(define-library (sicp ex35)
  (export estimate-integral
          area-predicate)
  (import (scheme base)
          (srfi 27)
          (sicp monte-carlo))
  (begin
    (define (area-predicate x1 x2 y1 y2 circle-rad circle-x circle-y)
      (lambda ()
        (let* ((x-range (- x2 x1))
               (y-range (- y2 y1))
               (x-point (+ x1 (* (random-real) x-range)))
               (y-point (+ y1 (* (random-real) y-range)))
               (in-circle (<= (+ (square (- x-point circle-x))
                                 (square (- y-point circle-y)))
                              (square circle-rad))))
                   in-circle)))
    (define (estimate-integral pred x1 x2 y1 y2 trials)
      (let ((area (* (- x2 x1) (- y2 y1))))
        (* area (monte-carlo trials pred))))
    (define (random-in-range low high)
      (let ((range (- high low)))
        (+ low (random-integer range))))))
