(define-library (seasoned-schemer tests ch18)
  (export run-tests-ch18)
  (import (scheme base)
          (scheme write)
          (srfi 78)
          (seasoned-schemer ch18))
  (begin
    (define run-tests-ch18
      (lambda ()
        (test-lots)
        (test-add-at-end)
        (test-add-at-end-too)
        (test-kons-kar-kdr)
        (test-finite-length)))
    (define test-lots
      (lambda ()
        (check (lots 3)
               => '(egg egg egg))))
    (define test-add-at-end
      (lambda ()
        (check (add-at-end 'egg '())
               => '(egg))
        (check (add-at-end 'egg '(scrambled))
               => '(scrambled egg))))
    (define test-add-at-end-too
      (lambda ()
        (check (add-at-end-too 'egg '())
               => '(egg))
        (check (add-at-end-too 'egg (list 'scrambled))
               => '(scrambled egg))))
    (define test-kons-kar-kdr
      (lambda ()
        (let ((subject1 (kons 'a (kons 'b '()))))
          (check (kar subject1)
                 => 'a)
          (check (kar (kdr subject1))
                 => 'b))))

   (define test-finite-length
     (lambda ()
       (let ((subject (list 1 2 3 4 5))
             (looped-list-subject (let ((ls (list 1 2 3 4 5)))
                                    (set-cdr! (last-cdr ls) ls)
                                    ls)))
         (check (finite-length '())
                => 0)
         (check (finite-length (list 1))
                => 1)
         (check (finite-length subject)
                => 5)
         (check (finite-length looped-list-subject)
                => #f))))))
