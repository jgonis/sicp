(define-library (sicp queues)
  (export make-queue
          queue-pop!
          queue-push!
          queue-peek
          queue-print
          queue-length
          queue-empty?)
  (import (scheme base)
          (scheme write))
  (begin
   (define (make-queue)
     (cons (cons '() '()) 0))
   (define (queue-pop! queue)
     (cond ((queue-empty? queue) (error "can't pop an empty queue!"))
           (else (let ((item (front-ptr queue)))
                   (cond ((= (queue-length queue) 1)
                          (set-front-ptr! queue '())
                          (set-rear-ptr! queue '())
                          (set-cdr! item '())
                          (dec-queue-count! queue)
                          (car item))
                         (else (set-front-ptr! queue (cdr item))
                               (dec-queue-count! queue)
                               (set-cdr! item '())
                               (car item)))))))
   (define (queue-push! queue item)
     (let ((new-item (cons item '())))
       (cond ((queue-empty? queue) (set-front-ptr! queue new-item)
              (set-rear-ptr! queue new-item)
              (inc-queue-count! queue))
             (else (set-cdr! (rear-ptr queue) new-item)
                   (set-rear-ptr! queue new-item)
                   (inc-queue-count! queue)))))
   (define (queue-peek queue)
     (cond ((queue-empty? queue) (error "can't peek an empty queue!"))
           (else (car (front-ptr queue)))))
   (define (queue-print queue)
     (define (helper current end)
       (cond ((equal? current end) (display (car current))
              (display " )")
              (newline))
             (else (display  (car current))
                   (display ", ")
                   (helper (cdr current) end))))
     (cond ((queue-empty? queue) (display "()")
            (newline))
           (else (display "( ")
                 (helper (front-ptr queue) (rear-ptr queue)))))
   (define (queue-length queue) (queue-count queue))
   (define (queue-empty? queue) (= (queue-count queue) 0))
   ;;non-exported methods
   (define (set-front-ptr! queue item) (set-car! (car queue) item))
   (define (set-rear-ptr! queue item) (set-cdr! (car queue) item))
   (define (front-ptr queue) (car (car queue)))
   (define (rear-ptr queue) (cdr (car queue)))
   (define (queue-count queue) (cdr queue))
   (define (inc-queue-count! queue) (set-cdr! queue
                                              (+ 1 (queue-count queue))))
   (define (dec-queue-count! queue) (set-cdr! queue
                                              (- (queue-count queue) 1)))))

