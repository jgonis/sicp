(define-library (tests ch2 segmentTests)
  (export segment-tests)
  (import (scheme base)
          (scheme write)
	  (ch2 point)
	  (ch2 segment)
	  (srfi 64))
  (begin    
    (define segment-tests
      (lambda ()
        (segment-equal-tests)
	(segment-midpoint-tests)
	(segment-error-tests)
        ;;If using Gauche scheme, uncomment this line to avoid the
        ;;test count continuing to increase
        (test-runner-reset (test-runner-current))))
    
    (define (segment-equal-tests)
      (test-begin "segment-equal-tests")
      (let* ((pt-one-two (make-point 1 2))
	     (pt-two-one (make-point 2 1))
	     (pt-three-one (make-point 3 1))
	     (seg1 (make-segment pt-one-two pt-two-one))
	     (seg2 (make-segment pt-one-two pt-two-one))
	     (seg3 (make-segment pt-two-one pt-one-two))
	     (seg4 (make-segment pt-two-one pt-three-one))
	     (seg5 (make-segment pt-three-one pt-two-one)))
	(test-assert (equal-segment seg1 seg2))
	(test-assert (equal-segment seg2 seg1))
	(test-assert (equal-segment seg2 seg3))
	(test-assert (not (equal-segment seg3 seg4)))
	(test-assert (not (equal-segment seg2 seg5))))
      (test-end "segment-equal-tests"))

    (define (segment-midpoint-tests)
      (test-begin "segment-midpoint-tests")
      (let* ((origin (make-point 0 0))
	     (pt-zero-two (make-point 0 2))
	     (pt-zero-negative-two (make-point 0 -2))
	     (pt-two-zero (make-point 2 0))
	     (pt-negative-two-zero (make-point -2 0))
	     (seg1 (make-segment origin pt-zero-two))
	     (seg2 (make-segment origin pt-zero-negative-two))
	     (seg3 (make-segment origin pt-two-zero))
	     (seg4 (make-segment origin pt-negative-two-zero)))
	(test-assert (equal-point (make-point 0 1)
				  (segment-midpoint seg1)))
	(test-assert (equal-point (make-point 0 -1)
				  (segment-midpoint seg2)))
	(test-assert (equal-point (make-point 1 0)
				  (segment-midpoint seg3)))
	(test-assert (equal-point (make-point -1 0)
				  (segment-midpoint seg4))))
      (test-end "segment-midpoint-tests"))

    (define (segment-error-tests)
      (test-begin "segment-error-tests")
      (let ((pt-one-two (make-point 1 2)))
	(test-error #t (make-segment pt-one-two pt-one-two)))
      (test-end "segment-error-tests"))))


