(define-library (ch2 intervalFunctions)
  (export add-interval
	  sub-interval
	  mul-interval
	  div-interval)
  (import (scheme base)
          (scheme write)
	  (ch2 intervals))
  (begin
    (define (add-interval x y)
      (make-interval (+ (lower-bound x)
			(lower-bound y))
		     (+ (upper-bound x)
			(upper-bound y))))
    
    (define (sub-interval x y)
      (make-interval (- (lower-bound x)
			(upper-bound y))
		     (- (upper-bound x)
			(lower-bound y))))
    
    (define (mul-interval-old x y)
      (let ((p1 (* (lower-bound x)
		   (lower-bound y)))
	    (p2 (* (lower-bound x)
		   (upper-bound y)))
	    (p3 (* (upper-bound x)
		   (lower-bound y)))
	    (p4 (* (upper-bound x)
		   (upper-bound y))))
	(make-interval (min p1 p2 p3 p4)
		       (max p1 p2 p3 p4))))

    (define (mul-interval x y)
      (let ((lower-x (lower-bound x))
	    (upper-x (upper-bound x))
	    (lower-y (lower-bound y))
	    (upper-y (upper-bound y)))
	(cond ((and (>= lower-x 0)
		    (>= upper-x 0)
		    (>= lower-y 0)
		    (>= upper-y 0)) (make-interval (* lower-x lower-y)
						   (* upper-x upper-y)))
	      ((and (>= lower-x 0)
		    (>= upper-x 0)
		    (< lower-y 0)
		    (>= upper-y 0)) (make-interval (* upper-x lower-y)
						   (* upper-x upper-y)))
	      ((and (>= lower-x 0)
		    (>= upper-x 0)
		    (< lower-y 0)
		    (< upper-y 0)) (make-interval (* upper-x lower-y)
						  (* lower-x upper-y)))
	      ((and (< lower-x 0)
		    (>= upper-x 0)
		    (>= lower-y 0)
		    (>= upper-y 0)) (make-interval (* lower-x upper-y)
						   (* upper-x upper-y)))
	      ((and (< lower-x 0)
		    (< upper-x 0)
		    (>= lower-y 0)
		    (>= upper-y 0)) (make-interval (* lower-x upper-y)
						   (* upper-x lower-y)))
	      ((and (< lower-x 0)
		    (>= upper-x 0)
		    (< lower-y 0)
		    (>= upper-y 0)) (make-interval (min (* lower-x upper-y)
							(* upper-x lower-y))
						   (max (* upper-x upper-y)
							(* lower-x lower-y))))
	      ((and (< lower-x 0)
		    (>= upper-x 0)
		    (< lower-y 0)
		    (< upper-y 0)) (make-interval (* upper-x lower-y)
						  (* lower-x lower-y)))
	      ((and (< lower-x 0)
		    (< upper-x 0)
		    (< lower-y 0)
		    (>= upper-y 0)) (make-interval (* lower-x upper-y)
						   (* lower-x lower-y)))
	      (else (make-interval (* upper-x upper-y)
				   (* lower-x lower-y))))))
    
	    (define (div-interval x y)
	      (cond ((and (<= (lower-bound y) 0)
			  (>= (upper-bound y) 0))
		     (error "Cannot divide with an interval that spans 0" y))
		    (else (mul-interval x
					(make-interval
					 (/ 1.0 (upper-bound y))
					 (/ 1.0 (lower-bound y)))))))))

