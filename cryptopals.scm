(define-library (cryptopals)
  (import (scheme base)
          (scheme list)
          (srfi 151))
  (export hex->base64
          fixed-xor)
  (begin
    (define base-64-table
      (lambda (number)
        (cond ((= number 0) #\A)
              ((= number 1) #\B)
              ((= number 2) #\C)
              ((= number 3) #\D)
              ((= number 4) #\E)
              ((= number 5) #\F)
              ((= number 6) #\G)
              ((= number 7) #\H)
              ((= number 8) #\I)
              ((= number 9) #\J)
              ((= number 10) #\K)
              ((= number 11) #\L)
              ((= number 12) #\M)
              ((= number 13) #\N)
              ((= number 14) #\O)
              ((= number 15) #\P)
              ((= number 16) #\Q)
              ((= number 17) #\R)
              ((= number 18) #\S)
              ((= number 19) #\T)
              ((= number 20) #\U)
              ((= number 21) #\V)
              ((= number 22) #\W)
              ((= number 23) #\X)
              ((= number 24) #\Y)
              ((= number 25) #\Z)
              ((= number 26) #\a)
              ((= number 27) #\b)
              ((= number 28) #\c)
              ((= number 29) #\d)
              ((= number 30) #\e)
              ((= number 31) #\f)
              ((= number 32) #\g)
              ((= number 33) #\h)
              ((= number 34) #\i)
              ((= number 35) #\j)
              ((= number 36) #\k)
              ((= number 37) #\l)
              ((= number 38) #\m)
              ((= number 39) #\n)
              ((= number 40) #\o)
              ((= number 41) #\p)
              ((= number 42) #\q)
              ((= number 43) #\r)
              ((= number 44) #\s)
              ((= number 45) #\t)
              ((= number 46) #\u)
              ((= number 47) #\v)
              ((= number 48) #\w)
              ((= number 49) #\x)
              ((= number 50) #\y)
              ((= number 51) #\z)
              ((= number 52) #\0)
              ((= number 53) #\1)
              ((= number 54) #\2)
              ((= number 55) #\3)
              ((= number 56) #\4)
              ((= number 57) #\5)
              ((= number 58) #\6)
              ((= number 59) #\7)
              ((= number 60) #\8)
              ((= number 61) #\9)
              ((= number 62) #\+)
              ((= number 63) #\/)
              (else (error "argument lies outside of base-64 range" number)))))
    (define letter-frequence-table
      (lambda (char)
        (cond ((char-ci=? char #\a) 8.167)
              ((char-ci=? char #\b) 1.492)
              ((char-ci=? char #\c) 2.782)
              ((char-ci=? char #\d) 4.253)
              ((char-ci=? char #\e) 12.702)
              ((char-ci=? char #\f) 2.228)
              ((char-ci=? char #\g) 2.015)
              ((char-ci=? char #\h) 6.094)
              ((char-ci=? char #\i) 6.966)
              ((char-ci=? char #\j) 0.153)
              ((char-ci=? char #\k) 0.772)
              ((char-ci=? char #\l) 4.025)
              ((char-ci=? char #\m) 2.406)
              ((char-ci=? char #\n) 6.749)
              ((char-ci=? char #\o) 7.507)
              ((char-ci=? char #\p) 1.929)
              ((char-ci=? char #\q) 0.095)
              ((char-ci=? char #\r) 5.987)
              ((char-ci=? char #\s) 6.327)
              ((char-ci=? char #\t) 9.056)
              ((char-ci=? char #\u) 2.758)
              ((char-ci=? char #\v) 0.978)
              ((char-ci=? char #\w) 2.360)
              ((char-ci=? char #\x) 0.150)
              ((char-ci=? char #\y) 1.974)
              ((char-ci=? char #\z) 0.074)
              ((else 0.0)))))
    (define (hex->base64 number)
      (define (helper bit-list result-str index)
        (cond ((<= (length bit-list) 6)
               (let ((num (list->bits bit-list)))
                 (string-set! result-str index (base-64-table num))))
              (else (helper (drop bit-list 6)
                            (string-set! result-str
                                         index
                                         (base-64-table
                                          (list->bits (take bit-list 6))))
                            (- index 1)))))
      (cond ((= number 0) "A")
            (else 
             (let* ((bit-list (bits->list number))
                    (bit-length (length bit-list))
                    (result-str (cond ((= 0 (remainder bit-length 6))
                                       (make-string (/ bit-length 6)))
                                      (else (make-string
                                             (+ 1
                                                (quotient bit-length
                                                          6)))))))
               (helper bit-list result-str (- (string-length
                                               result-str)
                                              1))))))
    (define (fixed-xor hex-string1
                       hex-string2)
      (cond ((not (= (string-length hex-string1)
                     (string-length hex-string2)))
              (error "Hex strings not equal in length"
                      hex-string1
                      hex-string2))
            (else (let ((hex-num1 (string->number hex-string1 16))
                        (hex-num2 (string->number hex-string2 16)))
                    (number->string (bitwise-xor hex-num1 hex-num2)
                                    16)))))
    (define (hex-string->vector hex-string)
      (define (helper hex-string result-vec index)
        )
      (let* ((str-len (string-length hex-string))
             (result-vector (cond ((= 0 (remainder str-len 2))
                                   (make-vector (/ str-len 2)))
                                  (else (make-vector
                                         (+ 1
                                            (quotient str-len 2))))))
             (str (list->string (reverse (string->list hex-string)))))
        ()))))


