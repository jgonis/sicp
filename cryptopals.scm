(define-library (cryptopals)
  (import (scheme base)
          (scheme list)
          (srfi 151))
  (export hex->base64)
  (begin
    (define base-64-table
      (lambda (number)
        (cond ((= number 0) #\A)
              ((= number 1) #\B)
              ((= number 2) #\C)
              ((= number 3) #\D)
              ((= number 4) #\E)
              ((= number 5) #\F)
              ((= number 6) #\G)
              ((= number 7) #\H)
              ((= number 8) #\I)
              ((= number 9) #\J)
              ((= number 10) #\K)
              ((= number 11) #\L)
              ((= number 12) #\M)
              ((= number 13) #\N)
              ((= number 14) #\O)
              ((= number 15) #\P)
              ((= number 16) #\Q)
              ((= number 17) #\R)
              ((= number 18) #\S)
              ((= number 19) #\T)
              ((= number 20) #\U)
              ((= number 21) #\V)
              ((= number 22) #\W)
              ((= number 23) #\X)
              ((= number 24) #\Y)
              ((= number 25) #\Z)
              ((= number 26) #\a)
              ((= number 27) #\b)
              ((= number 28) #\c)
              ((= number 29) #\d)
              ((= number 30) #\e)
              ((= number 31) #\f)
              ((= number 32) #\g)
              ((= number 33) #\h)
              ((= number 34) #\i)
              ((= number 35) #\j)
              ((= number 36) #\k)
              ((= number 37) #\l)
              ((= number 38) #\m)
              ((= number 39) #\n)
              ((= number 40) #\o)
              ((= number 41) #\p)
              ((= number 42) #\q)
              ((= number 43) #\r)
              ((= number 44) #\s)
              ((= number 45) #\t)
              ((= number 46) #\u)
              ((= number 47) #\v)
              ((= number 48) #\w)
              ((= number 49) #\x)
              ((= number 50) #\y)
              ((= number 51) #\z)
              ((= number 52) #\0)
              ((= number 53) #\1)
              ((= number 54) #\2)
              ((= number 55) #\3)
              ((= number 56) #\4)
              ((= number 57) #\5)
              ((= number 58) #\6)
              ((= number 59) #\7)
              ((= number 60) #\8)
              ((= number 61) #\9)
              ((= number 62) #\+)
              ((= number 63) #\/))))
    (define (hex->base64 number)
      (define (helper bit-list result-str index)
        (cond ((<= (length bit-list) 6)
               (let ((num (list->bits bit-list)))
                 (string-set! result-str index (base-64-table num))))
              (else (helper (drop bit-list 6)
                            (string-set! result-str
                                         index
                                         (base-64-table
                                          (list->bits (take bit-list 6))))
                            (- index 1)))))
      (cond ((= number 0) "A")
            (else 
             (let* ((bit-list (bits->list number))
                    (bit-length (length bit-list))
                    (result-str (cond ((= 0 (remainder bit-length 6))
                                       (make-string (/ bit-length 6)))
                                      (else (make-string
                                             (+ 1
                                                (quotient bit-length
                                                          6)))))))
               (helper bit-list result-str (- (string-length
                                               result-str)
                                              1))))))))
